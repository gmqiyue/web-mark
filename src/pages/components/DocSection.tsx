import ExampleTable from './ExampleTable';

const DocSection: React.FC = (props: any) => {
  return (
    <div {...props}>
      <section>
        <h2>这是标题 标题啊</h2>
        <article>
          <p>
            而所谓的<b>“操作”</b>
            <br />
            ，其实就是根据需求，
            <br />
            <br />
            <br />
            让各个API在合适的位置执行而已，所以，需求实现的难点就在于对API掌握的熟悉程度。
          </p>
          <p>所以，你只需MDN文档看一天，各个API试用一遍，结合本文内容，那么什么划词功能实现妥妥的。</p>
          <p>且，不仅是划词评论，以后各种与选区相关的开发都是信手拈来。</p>
          <p>
            这里推荐一篇关于选区介绍的好文：<a href="#">Web 中的“选区”和“光标”</a>
          </p>
          <p>
            就我自己的这个项目开发而言，就遇到了双击文字的时候，会连同其他元素的文字一起选择的问题（当祖先元素设置了 user-select:none
            的时候，没错，none范围选择，有点反直觉），或者选择的内容最后多了个换行符（会自动变成空格）的问题。
          </p>
          <p>好了，热身足够了，可以进入正题了，基于实例学习，这个是大多数开发者喜欢的学习方式。</p>
        </article>
      </section>
      <ExampleTable />
      <section>
        <h2>这是标题 标题啊</h2>
        <article>
          <p>
            而所谓的<b>“操作”</b>，其实就是根据需求，让各个API在合适的位置执行而已，所以，需求实现的难点就在于对API掌握的熟悉程度。
          </p>
          <p>所以，你只需MDN文档看一天，各个API试用一遍，结合本文内容，那么什么划词功能实现妥妥的。</p>
          <p>且，不仅是划词评论，以后各种与选区相关的开发都是信手拈来。</p>
          <p>
            这里推荐一篇关于选区介绍的好文：<a href="#">Web 中的“选区”和“光标”</a>
          </p>
          <p>
            就我自己的这个项目开发而言，就遇到了双击文字的时候，会连同其他元素的文字一起选择的问题（当祖先元素设置了 user-select:none
            的时候，没错，none范围选择，有点反直觉），或者选择的内容最后多了个换行符（会自动变成空格）的问题。
          </p>
          <p>好了，热身足够了，可以进入正题了，基于实例学习，这个是大多数开发者喜欢的学习方式。</p>
        </article>
      </section>
      <section>
        <h2>这是标题 标题啊</h2>
        <article>
          <p>
            而所谓的<b>“操作”</b>，其实就是根据需求，让各个API在合适的位置执行而已，所以，需求实现的难点就在于对API掌握的熟悉程度。
          </p>
          <p>所以，你只需MDN文档看一天，各个API试用一遍，结合本文内容，那么什么划词功能实现妥妥的。</p>
          <p>且，不仅是划词评论，以后各种与选区相关的开发都是信手拈来。</p>
          <p>
            这里推荐一篇关于选区介绍的好文：<a href="#">Web 中的“选区”和“光标”</a>
          </p>
          <p>
            就我自己的这个项目开发而言，就遇到了双击文字的时候，会连同其他元素的文字一起选择的问题（当祖先元素设置了 user-select:none
            的时候，没错，none范围选择，有点反直觉），或者选择的内容最后多了个换行符（会自动变成空格）的问题。
          </p>
          <p>好了，热身足够了，可以进入正题了，基于实例学习，这个是大多数开发者喜欢的学习方式。</p>
        </article>
      </section>
      <section>
        <h2>这是标题 标题啊</h2>
        <article>
          <p>
            而所谓的<b>“操作”</b>，其实就是根据需求，让各个API在合适的位置执行而已，所以，需求实现的难点就在于对API掌握的熟悉程度。
          </p>
          <p>所以，你只需MDN文档看一天，各个API试用一遍，结合本文内容，那么什么划词功能实现妥妥的。</p>
          <p>且，不仅是划词评论，以后各种与选区相关的开发都是信手拈来。</p>
          <p>
            这里推荐一篇关于选区介绍的好文：<a href="#">Web 中的“选区”和“光标”</a>
          </p>
          <p>
            就我自己的这个项目开发而言，就遇到了双击文字的时候，会连同其他元素的文字一起选择的问题（当祖先元素设置了 user-select:none
            的时候，没错，none范围选择，有点反直觉），或者选择的内容最后多了个换行符（会自动变成空格）的问题。
          </p>
          <p>好了，热身足够了，可以进入正题了，基于实例学习，这个是大多数开发者喜欢的学习方式。</p>
        </article>
      </section>
      <section>
        <h2>这是标题 标题啊</h2>
        <article>
          <p>
            而所谓的<b>“操作”</b>，其实就是根据需求，让各个API在合适的位置执行而已，所以，需求实现的难点就在于对API掌握的熟悉程度。
          </p>
          <p>所以，你只需MDN文档看一天，各个API试用一遍，结合本文内容，那么什么划词功能实现妥妥的。</p>
          <p>且，不仅是划词评论，以后各种与选区相关的开发都是信手拈来。</p>
          <p>
            这里推荐一篇关于选区介绍的好文：<a href="#">Web 中的“选区”和“光标”</a>
          </p>
          <p>
            就我自己的这个项目开发而言，就遇到了双击文字的时候，会连同其他元素的文字一起选择的问题（当祖先元素设置了 user-select:none
            的时候，没错，none范围选择，有点反直觉），或者选择的内容最后多了个换行符（会自动变成空格）的问题。
          </p>
          <p>好了，热身足够了，可以进入正题了，基于实例学习，这个是大多数开发者喜欢的学习方式。</p>
        </article>
      </section>
      <section>
        <h2>这是标题 标题啊</h2>
        <article>
          <p>
            而所谓的<b>“操作”</b>，其实就是根据需求，让各个API在合适的位置执行而已，所以，需求实现的难点就在于对API掌握的熟悉程度。
          </p>
          <p>所以，你只需MDN文档看一天，各个API试用一遍，结合本文内容，那么什么划词功能实现妥妥的。</p>
          <p>且，不仅是划词评论，以后各种与选区相关的开发都是信手拈来。</p>
          <p>
            这里推荐一篇关于选区介绍的好文：<a href="#">Web 中的“选区”和“光标”</a>
          </p>
          <p>
            就我自己的这个项目开发而言，就遇到了双击文字的时候，会连同其他元素的文字一起选择的问题（当祖先元素设置了 user-select:none
            的时候，没错，none范围选择，有点反直觉），或者选择的内容最后多了个换行符（会自动变成空格）的问题。
          </p>
          <p>好了，热身足够了，可以进入正题了，基于实例学习，这个是大多数开发者喜欢的学习方式。</p>
        </article>
      </section>
    </div>
  );
};

export default DocSection;
